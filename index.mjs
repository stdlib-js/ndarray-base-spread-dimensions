// Copyright (c) 2025 The Stdlib Authors. License is Apache-2.0: http://www.apache.org/licenses/LICENSE-2.0
/// <reference types="./index.d.ts" />
import e from"https://cdn.jsdelivr.net/gh/stdlib-js/ndarray-base-assert-is-row-major-string@esm/index.mjs";import s from"https://cdn.jsdelivr.net/gh/stdlib-js/ndarray-base-assert-is-read-only@esm/index.mjs";import n from"https://cdn.jsdelivr.net/gh/stdlib-js/array-base-assert-is-sorted-ascending@esm/index.mjs";import r from"https://cdn.jsdelivr.net/gh/stdlib-js/ndarray-base-to-unique-normalized-indices@esm/index.mjs";import t from"https://cdn.jsdelivr.net/gh/stdlib-js/ndarray-base-dtype@esm/index.mjs";import i from"https://cdn.jsdelivr.net/gh/stdlib-js/ndarray-base-shape@esm/index.mjs";import d from"https://cdn.jsdelivr.net/gh/stdlib-js/ndarray-base-strides@esm/index.mjs";import o from"https://cdn.jsdelivr.net/gh/stdlib-js/ndarray-base-offset@esm/index.mjs";import a from"https://cdn.jsdelivr.net/gh/stdlib-js/ndarray-base-order@esm/index.mjs";import m from"https://cdn.jsdelivr.net/gh/stdlib-js/ndarray-base-data-buffer@esm/index.mjs";import l from"https://cdn.jsdelivr.net/gh/stdlib-js/array-base-ones@esm/index.mjs";import h from"https://cdn.jsdelivr.net/gh/stdlib-js/array-base-zeros@esm/index.mjs";import j from"https://cdn.jsdelivr.net/gh/stdlib-js/error-tools-fmtprodmsg@esm/index.mjs";function u(u,g,p){var b,f,c,v,y,x,w,E,V,M,q;if(y=i(g,!1),x=d(g,!1),v=a(g),c=e(v),y.length>u)throw new RangeError(j("invalid argument. First argument must be greater than or equal to the number of dimensions in the input ndarray. Number of dimensions: %d. Value: `%d`.",y.length,u));if(null===(w=r(p,u-1)))throw new RangeError(j("invalid argument. Specified dimension index is out-of-bounds. Must be on the interval: [-%u, %u]. Value: `[%s]`.",u,u-1,p.join(", ")));if(w.length!==p.length)throw new Error(j("invalid argument. Must provide unique dimension indices. Value: `[%s]`.",p.join(", ")));if(w.length!==y.length)throw new RangeError(j("invalid argument. Must provide the same number of dimension indices as the number of dimensions in the input ndarray. Number of dimensions: %d. Value: `[%s]`.",y.length,p.join(", ")));if(w.length&&!n(w))throw new Error(j("invalid argument. Must provide dimension indices which resolve to nonnegative indices arranged in ascending order. Value: `[%s]`.",p.join(", ")));if(0===y.length)f=l(u),b=h(u);else for(b=[],f=[],q=0,M=0;M<u;M++)M===w[q]?(E=y[q],V=x[q],q+=1):q===y.length?(E=1,V=x[q-1],c||(V*=y[q-1])):(E=1,V=x[q],c&&(V*=y[q])),f.push(E),b.push(V);return s(g)?new g.constructor(t(g),m(g),f,b,o(g),v,{readonly:!0}):new g.constructor(t(g),m(g),f,b,o(g),v)}export{u as default};
//# sourceMappingURL=index.mjs.map
